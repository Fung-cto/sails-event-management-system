<!DOCTYPE html>
<html>

<head>
    
    <link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css">


    
    <title sg>Event Management System</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
        <% /* <meta name="robots" content="noindex"> */%>


            <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

            <!--STYLES-->
            <link rel="stylesheet" href="/styles/importer.css">
            <!--STYLES END-->
</head>
<meta charset="utf-8">
<div id="app">
    <!-- NavBar-->
    <template>
        <b-navbar>
            <template #brand>
                <b-navbar-item tag="router-link" :to="{ path: '/' }">
                    <img
                        src="https://raw.githubusercontent.com/buefy/buefy/dev/static/img/buefy-logo.png"
                        alt="Lightweight UI components for Vue.js based on Bulma"
                    >
                </b-navbar-item>
            </template>
            <template #start>
                <b-navbar-item href="/home">
                    Home
                </b-navbar-item>
                <b-navbar-item href="/search">
                    Search
                </b-navbar-item>
                <b-navbar-item v-if='<%= req.session.role == "student" %>' href="/registered">
                    My Registered Events
                </b-navbar-item>
                <b-navbar-item v-if='<%= req.session.role == "admin" %>' href="/create">
                    Create
                </b-navbar-item>
                <b-navbar-item v-if='<%= req.session.role == "admin" %>' href="/admin">
                    Admin
                </b-navbar-item>
            </template>
    
            <template #end>
                <b-navbar-item tag="div">
                    <button v-if='<%= req.session.username != null %>' class="button is-primary mr-1 mt-2" ><%= req.session.username  %></button>
                    <a v-if='<%= req.session.username != null %>' class="button mt-2" href="/user/logout">Logout </a>
                    <a v-if='<%= !req.session.username %>' class="button is-primary" href="/user/login">Login </a>
                </b-navbar-item>
            </template>
        </b-navbar>
    </template>
</div>

<script src="https://unpkg.com/vue"></script>
<script src="https://unpkg.com/buefy/dist/buefy.min.js"></script>
<script>
    new Vue({
        el: '#app',
    })
</script>

<section class="hero">
    <div class="hero-body" style="background-color: rgb(90, 134, 228); padding: 60px ; ">
        <p class="title" style="color: white;">
            Event management system
        </p>
        <p class="subtitle" style="color: white; font-size: 16px;">
            HKBU Event Management System is web-based system for department and student societies to broadcast events
            and activities as well as registration.
        </p>
    </div>
</section>

<body>
    <%- body %>



        <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

        <!--TEMPLATES-->
        <!--TEMPLATES END-->


        <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


        <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

        <!--SCRIPTS-->
        <script src="/dependencies/sails.io.js"></script>
        <script src="/dependencies/burger.js"></script>
        <!--SCRIPTS END-->
</body>

</html>